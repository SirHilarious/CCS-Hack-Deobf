//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Program Files\Minecraft Deobfuscator\Mappings\1.12.2"!

//Decompiled by Procyon!

package me.alpha432.oyvey.features.modules.exploit;

import me.alpha432.oyvey.features.modules.*;
import net.minecraft.util.math.*;
import me.alpha432.oyvey.features.setting.*;
import net.minecraft.entity.player.*;
import java.util.*;
import me.alpha432.oyvey.features.command.*;
import net.minecraft.util.*;
import net.minecraft.network.play.client.*;
import net.minecraft.network.*;

public class TemporalOffloader extends Module
{
    private List<BlockPos> blocksToLoad;
    private int currentIndex;
    public Setting<Integer> factor;
    public Setting<Integer> radiusX;
    public Setting<Integer> radiusY;
    public Setting<Integer> radiusZ;
    
    public TemporalOffloader() {
        super("TemporalOffloader", "", Category.EXPLOIT, true, false, false);
        this.factor = (Setting<Integer>)this.register(new Setting("PacketFactor", (T)10, (T)1, (T)20));
        this.radiusX = (Setting<Integer>)this.register(new Setting("Radius X", (T)10, (T)1, (T)100));
        this.radiusY = (Setting<Integer>)this.register(new Setting("Radius Y", (T)10, (T)1, (T)100));
        this.radiusZ = (Setting<Integer>)this.register(new Setting("Radius Z", (T)10, (T)1, (T)100));
        this.blocksToLoad = new ArrayList<BlockPos>();
    }
    
    @Override
    public void onEnable() {
        if (TemporalOffloader.mc.player == null || TemporalOffloader.mc.world == null) {
            this.disable();
            return;
        }
        this.blocksToLoad = new ArrayList<BlockPos>();
        this.blocksToLoad = Arrays.asList(this.getBlocksAround((EntityPlayer)TemporalOffloader.mc.player));
        this.currentIndex = 0;
    }
    
    @Override
    public void onUpdate() {
        if (TemporalOffloader.mc.player == null || TemporalOffloader.mc.world == null || this.blocksToLoad == null) {
            return;
        }
        for (int packetCount = 1; packetCount < this.factor.getValue() && !this.blocksToLoad.isEmpty(); ++packetCount, ++this.currentIndex) {
            BlockPos usePos;
            try {
                usePos = this.blocksToLoad.get(this.currentIndex);
            }
            catch (Exception e) {
                Command.sendMessage("Done");
                break;
            }
            TemporalOffloader.mc.getConnection().sendPacket((Packet)new CPacketPlayerTryUseItemOnBlock(usePos, EnumFacing.UP, EnumHand.MAIN_HAND, 0.0f, 0.0f, 0.0f));
        }
    }
    
    public BlockPos[] getBlocksAround(final EntityPlayer pl) {
        final long px = (long)pl.posX;
        final long py = (long)pl.posY;
        final long pz = (long)pl.posZ;
        final long ex = px + this.radiusX.getValue();
        final long ey = py + this.radiusY.getValue();
        final long ez = pz + this.radiusZ.getValue();
        final long sx = px - this.radiusX.getValue();
        final long sy = py - this.radiusY.getValue();
        final long sz = pz - this.radiusZ.getValue();
        final List<BlockPos> b = new ArrayList<BlockPos>();
        for (long x = sx; x < ex; ++x) {
            for (long y = sy; y < ey; ++y) {
                for (long z = sz; z < ez; ++z) {
                    final BlockPos pos = new BlockPos((double)x, (double)y, (double)z);
                    b.add(pos);
                }
            }
        }
        return b.toArray(new BlockPos[b.size()]);
    }
}
