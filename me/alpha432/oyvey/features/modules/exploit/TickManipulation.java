//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Program Files\Minecraft Deobfuscator\Mappings\1.12.2"!

//Decompiled by Procyon!

package me.alpha432.oyvey.features.modules.exploit;

import me.alpha432.oyvey.features.modules.*;
import me.alpha432.oyvey.features.setting.*;
import me.alpha432.oyvey.features.command.*;
import net.minecraft.entity.*;
import net.minecraft.entity.passive.*;
import net.minecraft.network.*;
import net.minecraft.util.*;
import net.minecraft.util.math.*;
import java.util.*;
import me.alpha432.oyvey.event.events.*;
import net.minecraft.network.play.client.*;
import net.minecraftforge.fml.common.eventhandler.*;
import net.minecraft.network.play.server.*;

public class TickManipulation extends Module
{
    private Setting<Boolean> debug;
    private double x;
    private double y;
    private double z;
    private boolean openedDonkey;
    
    public TickManipulation() {
        super("TickManipulation", "", Category.EXPLOIT, true, false, false);
        this.debug = (Setting<Boolean>)this.register(new Setting("Debug", (T)true));
    }
    
    @Override
    public void onEnable() {
        if (TickManipulation.mc.world == null || TickManipulation.mc.player == null) {
            this.disable();
            return;
        }
        Command.sendMessage("[TickManipulation] Preparing...");
        this.openedDonkey = false;
        if (!TickManipulation.mc.player.isRidingHorse()) {
            this.disable();
            Command.sendMessage("[TickManipulation] Insufficient Requirements");
            return;
        }
        this.x = TickManipulation.mc.player.ridingEntity.posX;
        this.y = TickManipulation.mc.player.ridingEntity.posY;
        this.z = TickManipulation.mc.player.ridingEntity.posZ;
        Command.sendMessage("[TickManipulation] Set Origin");
    }
    
    @Override
    public void onUpdate() {
        if (TickManipulation.mc.world == null || TickManipulation.mc.player == null) {
            this.disable();
            return;
        }
        boolean foundDonkey = false;
        Entity donkey = null;
        for (final Entity e : TickManipulation.mc.world.loadedEntityList) {
            if (e != null && e.getDistance((Entity)TickManipulation.mc.player) < 3.0f && !e.isDead && (e instanceof EntityDonkey || e instanceof EntityLlama)) {
                foundDonkey = true;
                donkey = e;
            }
        }
        if (foundDonkey && !this.openedDonkey) {
            TickManipulation.mc.getConnection().sendPacket((Packet)new CPacketEntityAction((Entity)TickManipulation.mc.player, CPacketEntityAction.Action.START_SNEAKING));
            TickManipulation.mc.getConnection().sendPacket((Packet)new CPacketUseEntity(donkey, EnumHand.MAIN_HAND, new Vec3d(0.0, 0.0, 0.0)));
            TickManipulation.mc.getConnection().sendPacket((Packet)new CPacketUseEntity(donkey, EnumHand.MAIN_HAND));
            TickManipulation.mc.getConnection().sendPacket((Packet)new CPacketEntityAction((Entity)TickManipulation.mc.player, CPacketEntityAction.Action.STOP_SNEAKING));
            TickManipulation.mc.player.ridingEntity.posX = this.x;
            TickManipulation.mc.player.ridingEntity.posY = this.y;
            TickManipulation.mc.player.ridingEntity.posZ = this.z;
            TickManipulation.mc.player.setPosition(this.x, this.y, this.z);
            TickManipulation.mc.player.ridingEntity.setPosition(this.x, this.y, this.z);
            this.openedDonkey = true;
            TickManipulation.mc.getConnection().sendPacket((Packet)new CPacketPlayer.Position(this.x, this.y, this.z, TickManipulation.mc.player.onGround));
            TickManipulation.mc.getConnection().sendPacket((Packet)new CPacketConfirmTeleport());
        }
    }
    
    @SubscribeEvent
    public void onPacketSend(final PacketEvent.Send event) {
        if (TickManipulation.mc.player == null || TickManipulation.mc.world == null) {
            return;
        }
        if (!this.openedDonkey) {
            if (event.getPacket() instanceof CPacketPlayer) {
                Command.sendTempMessageID("Cancelling Player", 8043809);
                event.setCanceled(true);
            }
        }
        else if (event.getPacket() instanceof CPacketVehicleMove) {
            Command.sendTempMessageID("Cancelling VM", 203912);
            event.setCanceled(true);
        }
    }
    
    @SubscribeEvent
    public void onPacketReceive(final PacketEvent.Receive event) {
        if (TickManipulation.mc.player == null || TickManipulation.mc.world == null) {
            return;
        }
        if (event.getPacket() instanceof SPacketPlayerPosLook) {
            Command.sendTempMessageID("SPacketPlayerPosLook", 123123123);
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketMoveVehicle) {
            final SPacketMoveVehicle sPacketMoveVehicle = (SPacketMoveVehicle)event.getPacket();
            Command.sendTempMessageID("SPacketMoveVehicle", 1234535123);
            event.setCanceled(true);
        }
    }
}
