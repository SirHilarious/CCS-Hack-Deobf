//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Program Files\Minecraft Deobfuscator\Mappings\1.12.2"!

//Decompiled by Procyon!

package me.alpha432.oyvey.features.modules.exploit;

import me.alpha432.oyvey.features.modules.*;
import java.util.concurrent.*;
import net.minecraft.block.state.*;
import java.util.*;
import net.minecraft.init.*;
import net.minecraft.network.play.server.*;
import me.alpha432.oyvey.features.command.*;
import net.minecraft.util.math.*;
import net.minecraftforge.fml.common.eventhandler.*;
import me.alpha432.oyvey.event.events.*;
import net.minecraft.util.*;
import net.minecraft.client.renderer.*;
import me.alpha432.oyvey.util.*;
import java.awt.*;
import net.minecraft.block.material.*;
import net.minecraft.block.*;

public class PlayerFinder extends Module
{
    private ConcurrentHashMap<BlockPos, IBlockState> blocks;
    private ArrayList<Block> dontRender;
    
    public PlayerFinder() {
        super("TemporalMain", "", Category.EXPLOIT, true, false, false);
        this.dontRender = new ArrayList<Block>();
        this.blocks = new ConcurrentHashMap<BlockPos, IBlockState>();
        this.dontRender.add(Blocks.DIRT);
        this.dontRender.add((Block)Blocks.GRASS);
        this.dontRender.add((Block)Blocks.SAND);
        this.dontRender.add(Blocks.STONE);
        this.dontRender.add(Blocks.GRAVEL);
    }
    
    @Override
    public void onEnable() {
        this.blocks = new ConcurrentHashMap<BlockPos, IBlockState>();
    }
    
    @SubscribeEvent
    public void onPacketReceive(final PacketEvent.Receive event) {
        if (PlayerFinder.mc.player == null || PlayerFinder.mc.world == null) {
            return;
        }
        if (this.blocks == null) {
            return;
        }
        if (event.getPacket() instanceof SPacketBlockChange) {
            final SPacketBlockChange blockChange = (SPacketBlockChange)event.getPacket();
            if (blockChange.blockState.getBlock() == Blocks.AIR) {
                return;
            }
            Command.sendTempMessageID("[Temporal] Detection: " + blockChange.blockPosition + " : " + blockChange.blockState.getBlock(), 69420);
            PlayerFinder.mc.world.getChunk(PlayerFinder.mc.player.chunkCoordX, PlayerFinder.mc.player.chunkCoordZ).isTerrainPopulated = true;
            PlayerFinder.mc.world.getChunk(PlayerFinder.mc.player.chunkCoordX, PlayerFinder.mc.player.chunkCoordZ).loaded = true;
            final int i = PlayerFinder.mc.gameSettings.renderDistanceChunks;
            final int j = MathHelper.floor(PlayerFinder.mc.player.posX / 16.0);
            final int k = MathHelper.floor(PlayerFinder.mc.player.posZ / 16.0);
            for (int l = -i; l <= i; ++l) {
                for (int i2 = -i; i2 <= i; ++i2) {
                    PlayerFinder.mc.world.visibleChunks.add(new ChunkPos(l + j, i2 + k));
                }
            }
            PlayerFinder.mc.world.setBlockState(blockChange.blockPosition, blockChange.blockState);
            this.blocks.put(blockChange.blockPosition, blockChange.blockState);
        }
    }
    
    @Override
    public void onRender3D(final Render3DEvent event) {
        try {
            if (this.blocks == null || this.blocks.isEmpty()) {
                return;
            }
            this.blocks.forEach((blockPos, blockState) -> {
                if (!this.dontRender.contains(blockState.getBlock()) && blockState.getBlock().getDefaultState().getRenderType() != EnumBlockRenderType.INVISIBLE) {
                    GlStateManager.pushMatrix();
                    RenderUtil.drawBoxDepth(blockPos, this.getColor(blockState.getBlock()));
                    GlStateManager.popMatrix();
                }
            });
        }
        catch (Exception e) {
            Command.sendMessage("Exception Caught");
        }
    }
    
    private Color getColor(final Block block) {
        if (block instanceof BlockQuartz) {
            return new Color(255, 255, 255, 190);
        }
        if (block instanceof BlockChest) {
            return new Color(71, 25, 0, 255);
        }
        if (block instanceof BlockEnderChest) {
            return new Color(132, 0, 219, 255);
        }
        if (block instanceof BlockDoor) {
            return new Color(146, 106, 0, 150);
        }
        if (block instanceof BlockLeaves) {
            return new Color(47, 255, 0, 69);
        }
        if (block instanceof BlockShulkerBox) {
            return new Color(255, 0, 0, 255);
        }
        if (block instanceof BlockLog) {
            return new Color(102, 46, 28, 69);
        }
        if (block.material == Material.WATER) {
            return new Color(0, 255, 234, 97);
        }
        if (block instanceof BlockPlanks) {
            return new Color(156, 67, 40, 235);
        }
        return new Color(0, 144, 255, 190);
    }
}
